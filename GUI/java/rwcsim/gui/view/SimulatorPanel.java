package rwcsim.gui.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import rwcsim.basicutils.Configuration;
import rwcsim.basicutils.concepts.Unit;
import rwcsim.gui.controller.SimulatorController;
import rwcsim.gui.controller.UnitFormationPanelController;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SimulatorPanel extends JFrame {

    private JPanel rootPanel;
    private JTextArea textArea1;
    private UnitFormationPanel secondSelector;
    private UnitFormationPanel firstSelector;
    private JButton runCurrentSimulationButton;
    private JTextField simulationCountField;
    private JProgressBar simProgressBar;

    private SimulatorController simulatorController;
    private Configuration configuration;
    private UnitFormationPanelController firstController;
    private UnitFormationPanelController secondController;


    public SimulatorPanel(SimulatorController simulatorController, Configuration configuration) {
        super("SimulatorPanel Panel");
        this.simulatorController = simulatorController;
        this.configuration = configuration;

        this.setContentPane(rootPanel);
        initializeListeners();

        this.firstController = new UnitFormationPanelController(firstSelector);
        this.secondController = new UnitFormationPanelController(secondSelector);
    }

    private void initializeListeners() {
        runCurrentSimulationButton.addActionListener(e -> {

            // Initialize the progress bar
            final int simCount = Integer.parseInt(simulationCountField.getText());
            SwingUtilities.invokeLater(() -> {
                this.simProgressBar.setMinimum(0);
                this.simProgressBar.setMaximum(simCount);
                this.simProgressBar.setValue(0);
            });

            // Off thread the waiting on the simulation so we can return controll to the Swing thread right away
            new Thread(() -> simulatorController.runSimulation(
                    firstController.getUnit(),
                    firstController.getFormation(),
                    firstController.getRerollBehavior(),
                    secondController.getUnit(),
                    secondController.getFormation(),
                    secondController.getRerollBehavior(),
                    simCount,
                    SimulatorPanel.this::handleProgressUpdate
            )).start();

        });
    }

    private void handleProgressUpdate(final int runNumberCompleted) {
        SwingUtilities.invokeLater(() -> {
            // They could finish out of order in reporting -- don't let this walk backward
            if (runNumberCompleted > simProgressBar.getValue()) {
                this.simProgressBar.setValue(runNumberCompleted);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        textArea1 = new JTextArea();
        rootPanel.add(textArea1, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        firstSelector = new UnitFormationPanel();
        rootPanel.add(firstSelector.$$$getRootComponent$$$(), new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        secondSelector = new UnitFormationPanel();
        rootPanel.add(secondSelector.$$$getRootComponent$$$(), new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        runCurrentSimulationButton = new JButton();
        runCurrentSimulationButton.setText("Start Simulation");
        panel1.add(runCurrentSimulationButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        simulationCountField = new JTextField();
        simulationCountField.setHorizontalAlignment(0);
        simulationCountField.setText("500");
        panel1.add(simulationCountField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 1, false));
        final JLabel label1 = new JLabel();
        label1.setText("Simulation Count");
        panel1.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        simProgressBar = new JProgressBar();
        rootPanel.add(simProgressBar, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
